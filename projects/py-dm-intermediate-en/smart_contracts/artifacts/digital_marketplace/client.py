# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "allow_asset(pay,asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "first_deposit(pay,axfer,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deposit(axfer,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_price(uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(asset,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "buy(address,asset,uint64,pay,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "bid(address,asset,uint64,pay,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "accept_bid(asset,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZGlnaXRhbF9tYXJrZXRwbGFjZS5jb250cmFjdC5EaWdpdGFsTWFya2V0cGxhY2UuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9kaWdpdGFsX21hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEwCiAgICAvLyBjbGFzcyBEaWdpdGFsTWFya2V0cGxhY2UoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgaW50IDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "DigitalMarketplace",
        "methods": [
            {
                "name": "allow_asset",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbr_pay"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "first_deposit",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbr_pay"
                    },
                    {
                        "type": "axfer",
                        "name": "xfer"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    },
                    {
                        "type": "uint64",
                        "name": "unitary_price"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "deposit",
                "args": [
                    {
                        "type": "axfer",
                        "name": "xfer"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_price",
                "args": [
                    {
                        "type": "uint64",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    },
                    {
                        "type": "uint64",
                        "name": "unitary_price"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "buy",
                "args": [
                    {
                        "type": "address",
                        "name": "owner"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    },
                    {
                        "type": "pay",
                        "name": "buy_pay"
                    },
                    {
                        "type": "uint64",
                        "name": "quantity"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "bid",
                "args": [
                    {
                        "type": "address",
                        "name": "owner"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    },
                    {
                        "type": "pay",
                        "name": "bid_pay"
                    },
                    {
                        "type": "uint64",
                        "name": "quantity"
                    },
                    {
                        "type": "uint64",
                        "name": "unitary_price"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "accept_bid",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data)
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class AllowAssetArgs(_ArgsBase[None]):
    mbr_pay: TransactionWithSigner
    asset: int

    @staticmethod
    def method() -> str:
        return "allow_asset(pay,asset)void"


@dataclasses.dataclass(kw_only=True)
class FirstDepositArgs(_ArgsBase[None]):
    mbr_pay: TransactionWithSigner
    xfer: TransactionWithSigner
    nonce: int
    unitary_price: int

    @staticmethod
    def method() -> str:
        return "first_deposit(pay,axfer,uint64,uint64)void"


@dataclasses.dataclass(kw_only=True)
class DepositArgs(_ArgsBase[None]):
    xfer: TransactionWithSigner
    nonce: int

    @staticmethod
    def method() -> str:
        return "deposit(axfer,uint64)void"


@dataclasses.dataclass(kw_only=True)
class SetPriceArgs(_ArgsBase[None]):
    asset: int
    nonce: int
    unitary_price: int

    @staticmethod
    def method() -> str:
        return "set_price(uint64,uint64,uint64)void"


@dataclasses.dataclass(kw_only=True)
class WithdrawArgs(_ArgsBase[None]):
    asset: int
    nonce: int

    @staticmethod
    def method() -> str:
        return "withdraw(asset,uint64)void"


@dataclasses.dataclass(kw_only=True)
class BuyArgs(_ArgsBase[None]):
    owner: str
    asset: int
    nonce: int
    buy_pay: TransactionWithSigner
    quantity: int

    @staticmethod
    def method() -> str:
        return "buy(address,asset,uint64,pay,uint64)void"


@dataclasses.dataclass(kw_only=True)
class BidArgs(_ArgsBase[None]):
    owner: str
    asset: int
    nonce: int
    bid_pay: TransactionWithSigner
    quantity: int
    unitary_price: int

    @staticmethod
    def method() -> str:
        return "bid(address,asset,uint64,pay,uint64,uint64)void"


@dataclasses.dataclass(kw_only=True)
class AcceptBidArgs(_ArgsBase[None]):
    asset: int
    nonce: int

    @staticmethod
    def method() -> str:
        return "accept_bid(asset,uint64)void"


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def allow_asset(
        self,
        *,
        mbr_pay: TransactionWithSigner,
        asset: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `allow_asset(pay,asset)void` ABI method
        
        :param TransactionWithSigner mbr_pay: The `mbr_pay` ABI parameter
        :param int asset: The `asset` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AllowAssetArgs(
            mbr_pay=mbr_pay,
            asset=asset,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def first_deposit(
        self,
        *,
        mbr_pay: TransactionWithSigner,
        xfer: TransactionWithSigner,
        nonce: int,
        unitary_price: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `first_deposit(pay,axfer,uint64,uint64)void` ABI method
        
        :param TransactionWithSigner mbr_pay: The `mbr_pay` ABI parameter
        :param TransactionWithSigner xfer: The `xfer` ABI parameter
        :param int nonce: The `nonce` ABI parameter
        :param int unitary_price: The `unitary_price` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = FirstDepositArgs(
            mbr_pay=mbr_pay,
            xfer=xfer,
            nonce=nonce,
            unitary_price=unitary_price,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def deposit(
        self,
        *,
        xfer: TransactionWithSigner,
        nonce: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `deposit(axfer,uint64)void` ABI method
        
        :param TransactionWithSigner xfer: The `xfer` ABI parameter
        :param int nonce: The `nonce` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DepositArgs(
            xfer=xfer,
            nonce=nonce,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_price(
        self,
        *,
        asset: int,
        nonce: int,
        unitary_price: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `set_price(uint64,uint64,uint64)void` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param int nonce: The `nonce` ABI parameter
        :param int unitary_price: The `unitary_price` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetPriceArgs(
            asset=asset,
            nonce=nonce,
            unitary_price=unitary_price,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def withdraw(
        self,
        *,
        asset: int,
        nonce: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `withdraw(asset,uint64)void` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param int nonce: The `nonce` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = WithdrawArgs(
            asset=asset,
            nonce=nonce,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def buy(
        self,
        *,
        owner: str,
        asset: int,
        nonce: int,
        buy_pay: TransactionWithSigner,
        quantity: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `buy(address,asset,uint64,pay,uint64)void` ABI method
        
        :param str owner: The `owner` ABI parameter
        :param int asset: The `asset` ABI parameter
        :param int nonce: The `nonce` ABI parameter
        :param TransactionWithSigner buy_pay: The `buy_pay` ABI parameter
        :param int quantity: The `quantity` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = BuyArgs(
            owner=owner,
            asset=asset,
            nonce=nonce,
            buy_pay=buy_pay,
            quantity=quantity,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def bid(
        self,
        *,
        owner: str,
        asset: int,
        nonce: int,
        bid_pay: TransactionWithSigner,
        quantity: int,
        unitary_price: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `bid(address,asset,uint64,pay,uint64,uint64)void` ABI method
        
        :param str owner: The `owner` ABI parameter
        :param int asset: The `asset` ABI parameter
        :param int nonce: The `nonce` ABI parameter
        :param TransactionWithSigner bid_pay: The `bid_pay` ABI parameter
        :param int quantity: The `quantity` ABI parameter
        :param int unitary_price: The `unitary_price` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = BidArgs(
            owner=owner,
            asset=asset,
            nonce=nonce,
            bid_pay=bid_pay,
            quantity=quantity,
            unitary_price=unitary_price,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def accept_bid(
        self,
        *,
        asset: int,
        nonce: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `accept_bid(asset,uint64)void` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param int nonce: The `nonce` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AcceptBidArgs(
            asset=asset,
            nonce=nonce,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to create an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_create(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class DigitalMarketplaceClient:
    """A class for interacting with the DigitalMarketplace app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        DigitalMarketplaceClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def allow_asset(
        self,
        *,
        mbr_pay: TransactionWithSigner,
        asset: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `allow_asset(pay,asset)void` ABI method
        
        :param TransactionWithSigner mbr_pay: The `mbr_pay` ABI parameter
        :param int asset: The `asset` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = AllowAssetArgs(
            mbr_pay=mbr_pay,
            asset=asset,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def first_deposit(
        self,
        *,
        mbr_pay: TransactionWithSigner,
        xfer: TransactionWithSigner,
        nonce: int,
        unitary_price: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `first_deposit(pay,axfer,uint64,uint64)void` ABI method
        
        :param TransactionWithSigner mbr_pay: The `mbr_pay` ABI parameter
        :param TransactionWithSigner xfer: The `xfer` ABI parameter
        :param int nonce: The `nonce` ABI parameter
        :param int unitary_price: The `unitary_price` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = FirstDepositArgs(
            mbr_pay=mbr_pay,
            xfer=xfer,
            nonce=nonce,
            unitary_price=unitary_price,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def deposit(
        self,
        *,
        xfer: TransactionWithSigner,
        nonce: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `deposit(axfer,uint64)void` ABI method
        
        :param TransactionWithSigner xfer: The `xfer` ABI parameter
        :param int nonce: The `nonce` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = DepositArgs(
            xfer=xfer,
            nonce=nonce,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_price(
        self,
        *,
        asset: int,
        nonce: int,
        unitary_price: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `set_price(uint64,uint64,uint64)void` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param int nonce: The `nonce` ABI parameter
        :param int unitary_price: The `unitary_price` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetPriceArgs(
            asset=asset,
            nonce=nonce,
            unitary_price=unitary_price,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def withdraw(
        self,
        *,
        asset: int,
        nonce: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `withdraw(asset,uint64)void` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param int nonce: The `nonce` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = WithdrawArgs(
            asset=asset,
            nonce=nonce,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def buy(
        self,
        *,
        owner: str,
        asset: int,
        nonce: int,
        buy_pay: TransactionWithSigner,
        quantity: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `buy(address,asset,uint64,pay,uint64)void` ABI method
        
        :param str owner: The `owner` ABI parameter
        :param int asset: The `asset` ABI parameter
        :param int nonce: The `nonce` ABI parameter
        :param TransactionWithSigner buy_pay: The `buy_pay` ABI parameter
        :param int quantity: The `quantity` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = BuyArgs(
            owner=owner,
            asset=asset,
            nonce=nonce,
            buy_pay=buy_pay,
            quantity=quantity,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def bid(
        self,
        *,
        owner: str,
        asset: int,
        nonce: int,
        bid_pay: TransactionWithSigner,
        quantity: int,
        unitary_price: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `bid(address,asset,uint64,pay,uint64,uint64)void` ABI method
        
        :param str owner: The `owner` ABI parameter
        :param int asset: The `asset` ABI parameter
        :param int nonce: The `nonce` ABI parameter
        :param TransactionWithSigner bid_pay: The `bid_pay` ABI parameter
        :param int quantity: The `quantity` ABI parameter
        :param int unitary_price: The `unitary_price` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = BidArgs(
            owner=owner,
            asset=asset,
            nonce=nonce,
            bid_pay=bid_pay,
            quantity=quantity,
            unitary_price=unitary_price,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def accept_bid(
        self,
        *,
        asset: int,
        nonce: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `accept_bid(asset,uint64)void` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param int nonce: The `nonce` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = AcceptBidArgs(
            asset=asset,
            nonce=nonce,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Creates an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.create(
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: algokit_utils.DeployCallArgs | None = None,
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param algokit_utils.DeployCallArgs | None create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
